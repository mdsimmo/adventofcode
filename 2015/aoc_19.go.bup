package main

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
	"slices"
	"strings"
)

type Entry struct {
	steps int
	seq string
}

type Replace struct {
	from string
	to string
}

func aoc_19_run() {

	file, err := os.Open("aoc_19_in.txt")
	if err != nil {
		panic(err)
	}

	replaces := make([]Replace, 0)
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		line = regexp.MustCompile("Ti").ReplaceAllString(line, "X")
		parts := strings.Split(line, " ")
		pre := regexp.MustCompile("[a-z]").ReplaceAllString(string(parts[0][0]), "")
		post := regexp.MustCompile("[a-z]").ReplaceAllString(parts[2], "")
		replaces = append(replaces, Replace {
			from: post,
			to: pre,
		})
	}

	slices.SortFunc(replaces, repSort)

	fmt.Printf("Replaces: %+v\n", replaces)

	file2, err := os.Open("aoc_19_in2.txt")
	if err != nil {
		panic(err)
	}
	reader := bufio.NewScanner(file2)
	reader.Scan()
	sequence := reader.Text()
	sequence = regexp.MustCompile("[a-z]").ReplaceAllString(sequence, "")
	fmt.Printf("Sequence: %s\n", sequence)

	toscan := []Entry {{
		seq: sequence,
		steps: 0,
	}}
	
	for true {
		scan := toscan[len(toscan)-1]
		toscan = toscan[:len(toscan)-1]

		fmt.Printf("Testing: %+v\n", scan)
		for _, rep := range(replaces) {
			if (rep.to == "") && (scan.seq != rep.from) {
				continue
			}
			location := strings.Index(scan.seq, rep.from)
			if location < 0 {
				continue
			}
			fmt.Printf("  Replace %s -> %s\n", rep.from, rep.to)
			var newseq strings.Builder
			newseq.WriteString(scan.seq[:location])
			newseq.WriteString(string(rep.to))
			newseq.WriteString(scan.seq[location+len(rep.from):])
			
			toscan = append(toscan, Entry{
				seq: newseq.String(),
				steps: scan.steps+1,
			})

			if newseq.String() == "" {
				fmt.Printf("FOUND IT!!! %d\n", scan.steps+1)
				return
			}
		}
	}
}

func repSort(a Replace, b Replace) int {
	if len(a.from) < len(b.from) {
		return -1
	} else if len(a.from) > len(b.from) {
		return 1
	} else {
		return 0
	}
}

